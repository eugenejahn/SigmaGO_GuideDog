#!/usr/bin/python 
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#|R|a|s|p|b|e|r|r|y|P|i|.|c|o|m|.|t|w|
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# Copyright (c) 2016, raspberrypi.com.tw
# All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# move_car.py
# control car with argument [w=forward/a=left/s=backward/d=right]
# usage: sudo python move_car.py [w/a/s/d]
#
# Author : sosorry
# Date   : 08/01/2015

import RPi.GPIO as GPIO
import time
import readchar

class carMove():
    def __init__(self):
        self.Motor_R1_Pin = 16
        self.Motor_R2_Pin = 18
        self.Motor_L1_Pin = 11
        self.Motor_L2_Pin = 13
        self.t = 0.5

       # GPIO.setwarnings(False)
        GPIO.setmode(GPIO.BOARD)
     
    def stop(self):
        GPIO.setup(self.Motor_R1_Pin, GPIO.OUT, initial=GPIO.LOW)
        GPIO.setup(self.Motor_R2_Pin, GPIO.OUT, initial=GPIO.LOW)
        GPIO.setup(self.Motor_L1_Pin, GPIO.OUT, initial=GPIO.LOW)
        GPIO.setup(self.Motor_L2_Pin, GPIO.OUT, initial=GPIO.LOW)
        GPIO.output(self.Motor_R1_Pin, False)
        GPIO.output(self.Motor_R2_Pin, False)
        GPIO.output(self.Motor_L1_Pin, False)
        GPIO.output(self.Motor_L2_Pin, False)
        GPIO.cleanup()

    def forward(self):
        GPIO.setup(self.Motor_R1_Pin, GPIO.OUT, initial=GPIO.LOW)
        GPIO.setup(self.Motor_R2_Pin, GPIO.OUT, initial=GPIO.LOW)
        GPIO.setup(self.Motor_L1_Pin, GPIO.OUT, initial=GPIO.LOW)
        GPIO.setup(self.Motor_L2_Pin, GPIO.OUT, initial=GPIO.LOW)
        GPIO.output(self.Motor_R1_Pin, True)
        GPIO.output(self.Motor_R2_Pin, False)
        GPIO.output(self.Motor_L1_Pin, True)
        GPIO.output(self.Motor_L2_Pin, False)
        time.sleep(self.t)
        self.stop()
        GPIO.cleanup()


    def backward():
        GPIO.setup(self.Motor_R1_Pin, GPIO.OUT, initial=GPIO.LOW)
        GPIO.setup(self.Motor_R2_Pin, GPIO.OUT, initial=GPIO.LOW)
        GPIO.setup(self.Motor_L1_Pin, GPIO.OUT, initial=GPIO.LOW)
        GPIO.setup(self.Motor_L2_Pin, GPIO.OUT, initial=GPIO.LOW)
        GPIO.output(self.Motor_R1_Pin, False)
        GPIO.output(self.Motor_R2_Pin, True)
        GPIO.output(self.Motor_L1_Pin, False)
        GPIO.output(self.Motor_L2_Pin, True)
        time.sleep(self.t)
        self.stop()
        GPIO.cleanup()


    def turnRight():
        GPIO.setup(self.Motor_R1_Pin, GPIO.OUT, initial=GPIO.LOW)
        GPIO.setup(self.Motor_R2_Pin, GPIO.OUT, initial=GPIO.LOW)
        GPIO.setup(self.Motor_L1_Pin, GPIO.OUT, initial=GPIO.LOW)
        GPIO.setup(self.Motor_L2_Pin, GPIO.OUT, initial=GPIO.LOW)
        GPIO.output(self.Motor_R1_Pin, True)
        GPIO.output(self.Motor_R2_Pin, False)
        GPIO.output(self.Motor_L1_Pin, False)
        GPIO.output(self.Motor_L2_Pin, False)
        time.sleep(self.t)
        self.stop()
        GPIO.cleanup()

    def turnLeft():
        GPIO.setup(self.Motor_R1_Pin, GPIO.OUT, initial=GPIO.LOW)
        GPIO.setup(self.Motor_R2_Pin, GPIO.OUT, initial=GPIO.LOW)
        GPIO.setup(self.Motor_L1_Pin, GPIO.OUT, initial=GPIO.LOW)
        GPIO.setup(self.Motor_L2_Pin, GPIO.OUT, initial=GPIO.LOW)
        GPIO.output(self.Motor_R1_Pin, False)
        GPIO.output(self.Motor_R2_Pin, False)
        GPIO.output(self.Motor_L1_Pin, True)
        GPIO.output(self.Motor_L2_Pin, False)
        time.sleep(self.t)
        self.stop()
        GPIO.cleanup()
    def quit():
        GPIO.cleanup()



